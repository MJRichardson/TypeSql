group DapperDao;

dao(name, usingNamespaces, outputTokens, inputTokens, rawSql) ::= <<
using System;
using System.Data;
using System.Data.Common;
using TypeSql; 
using System.Collections.Generic;
$usingNamespaces:using()$

public partial class $name$Result 
{
	$outputTokens:outputGetter()$
}

public interface I$name$
{
	IEnumerable<$name$Result> Execute( $inputTokens:inputParameter(); separator=", "$
        $if (inputTokens)$ , $endif$ 
        bool buffered=true  );
}

public partial class $name$ : DapperDao<$name$Result>, I$name$ 
{

	public $name$(string connectionStringName) : base(connectionStringName)
    {
    }

	public $name$(IDbConnection connection, IDbTransaction transaction=null)
		:base(connection, transaction) 
	{
	}
        
        public IEnumerable<$name$Result> Execute( $inputTokens:inputParameter(); separator=", "$
        $if (inputTokens)$ , $endif$ 
        bool buffered=true  )
	{
		object parameters = new {
			$inputTokens:tokenId(); separator=", "$
		};
		
		return Execute(parameters: parameters, buffered:buffered);
		
	}
	
	protected override string Sql
	{
		get{
			return @"
				$rawSql$
				";
		}
	}

}
>>

using(namespace) ::= <<
using $namespace$; >>

outputGetter(outputToken) ::= <<
public $outputToken.Type$ $outputToken.Id$
		{
			get;
			private set;
		}
>>

inputParameter(inputToken) ::= <<
$inputToken.Type$ $inputToken.Id$ = default($inputToken.Type$)
>>

tokenId(token) ::= <<
$token.Id$
>>

