//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C:\\Users\\mjr\\src\\TypeSql\\TypeSql\\Parsing\\TypeSql.g 2013-01-20 17:17:01

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using TypeSql.Antlr.Runtime;
using TypeSql.Antlr.Runtime.Misc;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
internal partial class TypeSqlLexer : TypeSql.Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int T__16=16;
	public const int T__17=17;
	public const int T__18=18;
	public const int T__19=19;
	public const int T__20=20;
	public const int T__21=21;
	public const int ANY=4;
	public const int DIGIT=5;
	public const int ID=6;
	public const int INPUT_TOKEN=7;
	public const int NAMESPACE=8;
	public const int NEWLINE=9;
	public const int OUTPUT_TOKEN=10;
	public const int SQL=11;
	public const int TYPE=12;
	public const int TYPESQL=13;
	public const int USING=14;
	public const int WHITESPACE=15;

    // delegates
    // delegators

	public TypeSqlLexer()
	{
		OnCreated();
	}

	public TypeSqlLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public TypeSqlLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "C:\\Users\\mjr\\src\\TypeSql\\TypeSql\\Parsing\\TypeSql.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_T__16();
	partial void LeaveRule_T__16();

	// $ANTLR start "T__16"
	[GrammarRule("T__16")]
	private void mT__16()
	{
		EnterRule_T__16();
		EnterRule("T__16", 1);
		TraceIn("T__16", 1);
		try
		{
			int _type = T__16;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\mjr\\src\\TypeSql\\TypeSql\\Parsing\\TypeSql.g:9:7: ( '.' )
			DebugEnterAlt(1);
			// C:\\Users\\mjr\\src\\TypeSql\\TypeSql\\Parsing\\TypeSql.g:9:9: '.'
			{
			DebugLocation(9, 9);
			Match('.'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__16", 1);
			LeaveRule("T__16", 1);
			LeaveRule_T__16();
		}
	}
	// $ANTLR end "T__16"

	partial void EnterRule_T__17();
	partial void LeaveRule_T__17();

	// $ANTLR start "T__17"
	[GrammarRule("T__17")]
	private void mT__17()
	{
		EnterRule_T__17();
		EnterRule("T__17", 2);
		TraceIn("T__17", 2);
		try
		{
			int _type = T__17;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\mjr\\src\\TypeSql\\TypeSql\\Parsing\\TypeSql.g:10:7: ( ':' )
			DebugEnterAlt(1);
			// C:\\Users\\mjr\\src\\TypeSql\\TypeSql\\Parsing\\TypeSql.g:10:9: ':'
			{
			DebugLocation(10, 9);
			Match(':'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__17", 2);
			LeaveRule("T__17", 2);
			LeaveRule_T__17();
		}
	}
	// $ANTLR end "T__17"

	partial void EnterRule_T__18();
	partial void LeaveRule_T__18();

	// $ANTLR start "T__18"
	[GrammarRule("T__18")]
	private void mT__18()
	{
		EnterRule_T__18();
		EnterRule("T__18", 3);
		TraceIn("T__18", 3);
		try
		{
			int _type = T__18;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\mjr\\src\\TypeSql\\TypeSql\\Parsing\\TypeSql.g:11:7: ( '?' )
			DebugEnterAlt(1);
			// C:\\Users\\mjr\\src\\TypeSql\\TypeSql\\Parsing\\TypeSql.g:11:9: '?'
			{
			DebugLocation(11, 9);
			Match('?'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__18", 3);
			LeaveRule("T__18", 3);
			LeaveRule_T__18();
		}
	}
	// $ANTLR end "T__18"

	partial void EnterRule_T__19();
	partial void LeaveRule_T__19();

	// $ANTLR start "T__19"
	[GrammarRule("T__19")]
	private void mT__19()
	{
		EnterRule_T__19();
		EnterRule("T__19", 4);
		TraceIn("T__19", 4);
		try
		{
			int _type = T__19;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\mjr\\src\\TypeSql\\TypeSql\\Parsing\\TypeSql.g:12:7: ( '@' )
			DebugEnterAlt(1);
			// C:\\Users\\mjr\\src\\TypeSql\\TypeSql\\Parsing\\TypeSql.g:12:9: '@'
			{
			DebugLocation(12, 9);
			Match('@'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__19", 4);
			LeaveRule("T__19", 4);
			LeaveRule_T__19();
		}
	}
	// $ANTLR end "T__19"

	partial void EnterRule_T__20();
	partial void LeaveRule_T__20();

	// $ANTLR start "T__20"
	[GrammarRule("T__20")]
	private void mT__20()
	{
		EnterRule_T__20();
		EnterRule("T__20", 5);
		TraceIn("T__20", 5);
		try
		{
			int _type = T__20;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\mjr\\src\\TypeSql\\TypeSql\\Parsing\\TypeSql.g:13:7: ( '[' )
			DebugEnterAlt(1);
			// C:\\Users\\mjr\\src\\TypeSql\\TypeSql\\Parsing\\TypeSql.g:13:9: '['
			{
			DebugLocation(13, 9);
			Match('['); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__20", 5);
			LeaveRule("T__20", 5);
			LeaveRule_T__20();
		}
	}
	// $ANTLR end "T__20"

	partial void EnterRule_T__21();
	partial void LeaveRule_T__21();

	// $ANTLR start "T__21"
	[GrammarRule("T__21")]
	private void mT__21()
	{
		EnterRule_T__21();
		EnterRule("T__21", 6);
		TraceIn("T__21", 6);
		try
		{
			int _type = T__21;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\mjr\\src\\TypeSql\\TypeSql\\Parsing\\TypeSql.g:14:7: ( ']' )
			DebugEnterAlt(1);
			// C:\\Users\\mjr\\src\\TypeSql\\TypeSql\\Parsing\\TypeSql.g:14:9: ']'
			{
			DebugLocation(14, 9);
			Match(']'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__21", 6);
			LeaveRule("T__21", 6);
			LeaveRule_T__21();
		}
	}
	// $ANTLR end "T__21"

	partial void EnterRule_USING();
	partial void LeaveRule_USING();

	// $ANTLR start "USING"
	[GrammarRule("USING")]
	private void mUSING()
	{
		EnterRule_USING();
		EnterRule("USING", 7);
		TraceIn("USING", 7);
		try
		{
			int _type = USING;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\mjr\\src\\TypeSql\\TypeSql\\Parsing\\TypeSql.g:62:7: ( ( 'U' | 'u' ) ( 'S' | 's' ) ( 'I' | 'i' ) ( 'N' | 'n' ) ( 'G' | 'g' ) )
			DebugEnterAlt(1);
			// C:\\Users\\mjr\\src\\TypeSql\\TypeSql\\Parsing\\TypeSql.g:62:9: ( 'U' | 'u' ) ( 'S' | 's' ) ( 'I' | 'i' ) ( 'N' | 'n' ) ( 'G' | 'g' )
			{
			DebugLocation(62, 9);
			if (input.LA(1)=='U'||input.LA(1)=='u')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(62, 18);
			if (input.LA(1)=='S'||input.LA(1)=='s')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(62, 27);
			if (input.LA(1)=='I'||input.LA(1)=='i')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(62, 36);
			if (input.LA(1)=='N'||input.LA(1)=='n')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(62, 45);
			if (input.LA(1)=='G'||input.LA(1)=='g')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("USING", 7);
			LeaveRule("USING", 7);
			LeaveRule_USING();
		}
	}
	// $ANTLR end "USING"

	partial void EnterRule_ID();
	partial void LeaveRule_ID();

	// $ANTLR start "ID"
	[GrammarRule("ID")]
	private void mID()
	{
		EnterRule_ID();
		EnterRule("ID", 8);
		TraceIn("ID", 8);
		try
		{
			int _type = ID;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\mjr\\src\\TypeSql\\TypeSql\\Parsing\\TypeSql.g:64:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | DIGIT | '_' )* )
			DebugEnterAlt(1);
			// C:\\Users\\mjr\\src\\TypeSql\\TypeSql\\Parsing\\TypeSql.g:65:2: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | DIGIT | '_' )*
			{
			DebugLocation(65, 2);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(65, 26);
			// C:\\Users\\mjr\\src\\TypeSql\\TypeSql\\Parsing\\TypeSql.g:65:26: ( 'a' .. 'z' | 'A' .. 'Z' | DIGIT | '_' )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if (((LA1_0>='0' && LA1_0<='9')||(LA1_0>='A' && LA1_0<='Z')||LA1_0=='_'||(LA1_0>='a' && LA1_0<='z')))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\mjr\\src\\TypeSql\\TypeSql\\Parsing\\TypeSql.g:
					{
					DebugLocation(65, 26);
					input.Consume();


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ID", 8);
			LeaveRule("ID", 8);
			LeaveRule_ID();
		}
	}
	// $ANTLR end "ID"

	partial void EnterRule_DIGIT();
	partial void LeaveRule_DIGIT();

	// $ANTLR start "DIGIT"
	[GrammarRule("DIGIT")]
	private void mDIGIT()
	{
		EnterRule_DIGIT();
		EnterRule("DIGIT", 9);
		TraceIn("DIGIT", 9);
		try
		{
			// C:\\Users\\mjr\\src\\TypeSql\\TypeSql\\Parsing\\TypeSql.g:68:17: ( '0' .. '9' )
			DebugEnterAlt(1);
			// C:\\Users\\mjr\\src\\TypeSql\\TypeSql\\Parsing\\TypeSql.g:
			{
			DebugLocation(68, 17);
			if ((input.LA(1)>='0' && input.LA(1)<='9'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("DIGIT", 9);
			LeaveRule("DIGIT", 9);
			LeaveRule_DIGIT();
		}
	}
	// $ANTLR end "DIGIT"

	partial void EnterRule_NEWLINE();
	partial void LeaveRule_NEWLINE();

	// $ANTLR start "NEWLINE"
	[GrammarRule("NEWLINE")]
	private void mNEWLINE()
	{
		EnterRule_NEWLINE();
		EnterRule("NEWLINE", 10);
		TraceIn("NEWLINE", 10);
		try
		{
			int _type = NEWLINE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\mjr\\src\\TypeSql\\TypeSql\\Parsing\\TypeSql.g:72:9: ( ( '\\r' )? '\\n' )
			DebugEnterAlt(1);
			// C:\\Users\\mjr\\src\\TypeSql\\TypeSql\\Parsing\\TypeSql.g:73:2: ( '\\r' )? '\\n'
			{
			DebugLocation(73, 2);
			// C:\\Users\\mjr\\src\\TypeSql\\TypeSql\\Parsing\\TypeSql.g:73:2: ( '\\r' )?
			int alt2=2;
			try { DebugEnterSubRule(2);
			try { DebugEnterDecision(2, false);
			int LA2_0 = input.LA(1);

			if ((LA2_0=='\r'))
			{
				alt2 = 1;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\mjr\\src\\TypeSql\\TypeSql\\Parsing\\TypeSql.g:73:2: '\\r'
				{
				DebugLocation(73, 2);
				Match('\r'); 

				}
				break;

			}
			} finally { DebugExitSubRule(2); }

			DebugLocation(73, 8);
			Match('\n'); 
			DebugLocation(73, 12);
			 _channel = Hidden; 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NEWLINE", 10);
			LeaveRule("NEWLINE", 10);
			LeaveRule_NEWLINE();
		}
	}
	// $ANTLR end "NEWLINE"

	partial void EnterRule_WHITESPACE();
	partial void LeaveRule_WHITESPACE();

	// $ANTLR start "WHITESPACE"
	[GrammarRule("WHITESPACE")]
	private void mWHITESPACE()
	{
		EnterRule_WHITESPACE();
		EnterRule("WHITESPACE", 11);
		TraceIn("WHITESPACE", 11);
		try
		{
			int _type = WHITESPACE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\mjr\\src\\TypeSql\\TypeSql\\Parsing\\TypeSql.g:76:13: ( ( ' ' | '\\t' )+ )
			DebugEnterAlt(1);
			// C:\\Users\\mjr\\src\\TypeSql\\TypeSql\\Parsing\\TypeSql.g:76:17: ( ' ' | '\\t' )+
			{
			DebugLocation(76, 17);
			// C:\\Users\\mjr\\src\\TypeSql\\TypeSql\\Parsing\\TypeSql.g:76:17: ( ' ' | '\\t' )+
			int cnt3=0;
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0=='\t'||LA3_0==' '))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\mjr\\src\\TypeSql\\TypeSql\\Parsing\\TypeSql.g:
					{
					DebugLocation(76, 17);
					input.Consume();


					}
					break;

				default:
					if (cnt3 >= 1)
						goto loop3;

					EarlyExitException eee3 = new EarlyExitException( 3, input );
					DebugRecognitionException(eee3);
					throw eee3;
				}
				cnt3++;
			}
			loop3:
				;

			} finally { DebugExitSubRule(3); }

			DebugLocation(76, 29);
			_channel = Hidden;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WHITESPACE", 11);
			LeaveRule("WHITESPACE", 11);
			LeaveRule_WHITESPACE();
		}
	}
	// $ANTLR end "WHITESPACE"

	partial void EnterRule_ANY();
	partial void LeaveRule_ANY();

	// $ANTLR start "ANY"
	[GrammarRule("ANY")]
	private void mANY()
	{
		EnterRule_ANY();
		EnterRule("ANY", 12);
		TraceIn("ANY", 12);
		try
		{
			int _type = ANY;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\mjr\\src\\TypeSql\\TypeSql\\Parsing\\TypeSql.g:79:6: ( . )
			DebugEnterAlt(1);
			// C:\\Users\\mjr\\src\\TypeSql\\TypeSql\\Parsing\\TypeSql.g:79:8: .
			{
			DebugLocation(79, 8);
			MatchAny(); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ANY", 12);
			LeaveRule("ANY", 12);
			LeaveRule_ANY();
		}
	}
	// $ANTLR end "ANY"

	public override void mTokens()
	{
		// C:\\Users\\mjr\\src\\TypeSql\\TypeSql\\Parsing\\TypeSql.g:1:8: ( T__16 | T__17 | T__18 | T__19 | T__20 | T__21 | USING | ID | NEWLINE | WHITESPACE | ANY )
		int alt4=11;
		try { DebugEnterDecision(4, false);
		int LA4_0 = input.LA(1);

		if ((LA4_0=='.'))
		{
			alt4 = 1;
		}
		else if ((LA4_0==':'))
		{
			alt4 = 2;
		}
		else if ((LA4_0=='?'))
		{
			alt4 = 3;
		}
		else if ((LA4_0=='@'))
		{
			alt4 = 4;
		}
		else if ((LA4_0=='['))
		{
			alt4 = 5;
		}
		else if ((LA4_0==']'))
		{
			alt4 = 6;
		}
		else if ((LA4_0=='U'||LA4_0=='u'))
		{
			int LA4_7 = input.LA(2);

			if ((LA4_7=='S'||LA4_7=='s'))
			{
				int LA4_19 = input.LA(3);

				if ((LA4_19=='I'||LA4_19=='i'))
				{
					int LA4_23 = input.LA(4);

					if ((LA4_23=='N'||LA4_23=='n'))
					{
						int LA4_24 = input.LA(5);

						if ((LA4_24=='G'||LA4_24=='g'))
						{
							int LA4_25 = input.LA(6);

							if (((LA4_25>='0' && LA4_25<='9')||(LA4_25>='A' && LA4_25<='Z')||LA4_25=='_'||(LA4_25>='a' && LA4_25<='z')))
							{
								alt4 = 8;
							}
							else
							{
								alt4 = 7;
							}
						}
						else
						{
							alt4 = 8;
						}
					}
					else
					{
						alt4 = 8;
					}
				}
				else
				{
					alt4 = 8;
				}
			}
			else
			{
				alt4 = 8;
			}
		}
		else if (((LA4_0>='A' && LA4_0<='T')||(LA4_0>='V' && LA4_0<='Z')||LA4_0=='_'||(LA4_0>='a' && LA4_0<='t')||(LA4_0>='v' && LA4_0<='z')))
		{
			alt4 = 8;
		}
		else if ((LA4_0=='\r'))
		{
			int LA4_9 = input.LA(2);

			if ((LA4_9=='\n'))
			{
				alt4 = 9;
			}
			else
			{
				alt4 = 11;
			}
		}
		else if ((LA4_0=='\n'))
		{
			alt4 = 9;
		}
		else if ((LA4_0=='\t'||LA4_0==' '))
		{
			alt4 = 10;
		}
		else if (((LA4_0>='\u0000' && LA4_0<='\b')||(LA4_0>='\u000B' && LA4_0<='\f')||(LA4_0>='\u000E' && LA4_0<='\u001F')||(LA4_0>='!' && LA4_0<='-')||(LA4_0>='/' && LA4_0<='9')||(LA4_0>=';' && LA4_0<='>')||LA4_0=='\\'||LA4_0=='^'||LA4_0=='`'||(LA4_0>='{' && LA4_0<='\uFFFF')))
		{
			alt4 = 11;
		}
		else
		{
			NoViableAltException nvae = new NoViableAltException("", 4, 0, input);
			DebugRecognitionException(nvae);
			throw nvae;
		}
		} finally { DebugExitDecision(4); }
		switch (alt4)
		{
		case 1:
			DebugEnterAlt(1);
			// C:\\Users\\mjr\\src\\TypeSql\\TypeSql\\Parsing\\TypeSql.g:1:10: T__16
			{
			DebugLocation(1, 10);
			mT__16(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// C:\\Users\\mjr\\src\\TypeSql\\TypeSql\\Parsing\\TypeSql.g:1:16: T__17
			{
			DebugLocation(1, 16);
			mT__17(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// C:\\Users\\mjr\\src\\TypeSql\\TypeSql\\Parsing\\TypeSql.g:1:22: T__18
			{
			DebugLocation(1, 22);
			mT__18(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// C:\\Users\\mjr\\src\\TypeSql\\TypeSql\\Parsing\\TypeSql.g:1:28: T__19
			{
			DebugLocation(1, 28);
			mT__19(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// C:\\Users\\mjr\\src\\TypeSql\\TypeSql\\Parsing\\TypeSql.g:1:34: T__20
			{
			DebugLocation(1, 34);
			mT__20(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// C:\\Users\\mjr\\src\\TypeSql\\TypeSql\\Parsing\\TypeSql.g:1:40: T__21
			{
			DebugLocation(1, 40);
			mT__21(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// C:\\Users\\mjr\\src\\TypeSql\\TypeSql\\Parsing\\TypeSql.g:1:46: USING
			{
			DebugLocation(1, 46);
			mUSING(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// C:\\Users\\mjr\\src\\TypeSql\\TypeSql\\Parsing\\TypeSql.g:1:52: ID
			{
			DebugLocation(1, 52);
			mID(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// C:\\Users\\mjr\\src\\TypeSql\\TypeSql\\Parsing\\TypeSql.g:1:55: NEWLINE
			{
			DebugLocation(1, 55);
			mNEWLINE(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// C:\\Users\\mjr\\src\\TypeSql\\TypeSql\\Parsing\\TypeSql.g:1:63: WHITESPACE
			{
			DebugLocation(1, 63);
			mWHITESPACE(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// C:\\Users\\mjr\\src\\TypeSql\\TypeSql\\Parsing\\TypeSql.g:1:74: ANY
			{
			DebugLocation(1, 74);
			mANY(); 

			}
			break;

		}

	}


	#region DFA

	protected override void InitDFAs()
	{
		base.InitDFAs();
	}

 
	#endregion

}
