<#@ template language="C#" visibility="internal" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

using System.Data;
using TypeSql.Templating.Dapper; 
using System.Collections.Generic;

public partial class <#=_name#>Result 
{
	<# foreach (var outputToken in _parseResult.OutputTokens) { #>
		public <#= outputToken.Type #>  <#= outputToken.Id #>
		{
			get;
			private set;
		}
	<#}#>
}

public class <#=_name#> : DapperDao<<#=_name#>Result>
{
        public <#=_name#>(string connectionStringName) : base(connectionStringName)
        {
        }

        public <#=_name#>(IDbConnection connection, IDbTransaction transaction=null) : base(connection, transaction)
        {
        }

		public IEnumerable<<#=_name#>Result> Execute(<#= string.Join("", _parseResult.InputTokens.Select(it=>string.Format("{0} {1}= default({0}), ", it.Type, it.Id)).ToArray()) #> bool buffered=true  )
		{
			<# if (_parseResult.InputTokens.Any()) { #>
			object parameters = new {
				<#= string.Join(",", _parseResult.InputTokens.Select(it=>it.Id).ToArray()) #>
			};
			<# } else { #>
				object parameters = null;
			<# } #>
			return Execute(parameters:parameters, buffered:buffered);
		}

		protected override string Sql
		{
			get{
				return @"
				<#=_parseResult.UnadornedSql#>
				";
			}
		}
}